#!/opt/local/bin/python2.6

"""
Script for generating a graph of dependencies.
Run it in a src/ directory.

You need to have pygraphviz / graphviz installed.
"""

import sys
import os
import distutils.core
import re
from datetime import datetime

try:
    import pygraphviz as pgv
except ImportError:
    print 'ERROR: could not import pygraphviz.'
    print ''
    print 'INSTALLATION:'
    print '- download graphviz from http://www.graphviz.org/Download..php'
    print '- download (!) the packge pygraphviz from ' + \
        'http://pypi.python.org/pypi/pygraphviz'
    print '- unzip'
    print '- edit the setup.py: uncomment lines "library_path" ' + \
        'and "include_path" for your operating system'
    print '- run: python setup.py install'
    sys.exit(0)


# helper method
def runcmd(cmd, log=False, respond=True):
    if log:
        print '  >', cmd
    if respond:
        p = os.popen(cmd, 'r')
        l = p.readlines()
        p.close()
        return l
    else:
        return os.system(cmd)

def get_egg(setup_py_path):
    oridir = os.getcwd()
    os.chdir(os.path.dirname(setup_py_path))
    try:
        egg = distutils.core.run_setup('setup.py')
    except:
        os.chdir(oridir)
        raise
    else:
        os.chdir(oridir)
        return egg

graph = pgv.AGraph(directed=True, layout='dot', mindist=1, mclimit=10, sep="0.01",
                   outputorder="breadthfirst", rankdir="LR", size="20!",
                   splines=True, fontsize=14, concentrate=False,
                   nodesep="0.25", normalize=False)
graph.node_attr.update(shape='tab', fontsize=18)
graph.edge_attr.update(decorate=False)

map = {}

for setup_py_path in runcmd('find . -name setup.py'):
    setup_py_path = setup_py_path.strip()
    try:
        egg = get_egg(setup_py_path)
    except Exception, e:
        print 'FAILED', setup_py_path, ':', str(e)
        continue
    map[egg.get_name()] = egg.install_requires

# cleanup
for pkg, deps in map.items():
    new_deps = []
    for name in deps:
        if '[' in name or ' ' in name:
            name = name.split(' ', 1)[0].split(']', 1)[0]
        if name in map.keys():
            new_deps.append(name)
    map[pkg] = new_deps


node_names = map.keys()
node_names.sort()
for pkg in node_names:
    graph.add_node(pkg)

for pkg in node_names:
    dependencies = map[pkg]
    for name in dependencies:
        attrs = {}
        graph.add_edge(pkg, name, color='grey50')

def depth_first_search(map, vertex, marked_vertices):
    marked_vertices.append(vertex)
    for target in map[vertex]:
        if target not in marked_vertices:
            depth_first_search(map, target, marked_vertices)
        elif marked_vertices.index(target) == 0:
            color = 'red'
            graph.add_edge(vertex, target, color=color, style='bold')


for pkg in node_names:
    depth_first_search(map, pkg, [])



graph.write('dependencies.dot')
print 'created dependencies.dot'
graph.layout()
filename = 'dependencies.pdf'
graph.draw(filename, prog='dot', format='pdf')
print 'created %s' % filename
