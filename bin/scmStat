#!/usr/bin/python

import re, os, sys

COLORS = {
    'red'           : '\033[0;31m%s\033[00m',
    'green'         : '\033[0;32m%s\033[00m',
    'yellow'        : '\033[0;33m%s\033[00m',
    'red_bold'      : '\033[1;31m%s\033[00m',
    'green_bold'    : '\033[1;32m%s\033[00m',
    'yellow_bold'   : '\033[1;33m%s\033[00m',
    'none'          : '%s',
    }

class ColorString(str):

    def __new__(cls, value, color):
        self = str.__new__(cls, COLORS[color] % value)
        self.value = value
        self.color = color
        return self

    def __len__(self):
        return len(self.value)

    def ljust(self, width):
        s = str(self)
        if width - len(self) > 0:
            s += ' ' * (width - len(self))
        return s

    def __add__(self, other):
        if isinstance(other, ColorString):
            value = self.value + other.value
        else:
            value = self.value + str(other)
        newstr = str( self ) + str( other )
        newobj = ColorString(newstr, 'none')
        newobj.value = value
        return newobj

def runcmd(cmd):
    p = os.popen(cmd, 'r')
    l = p.readlines()
    p.close()
    return l


def show_status():
    dirs = os.listdir('.')
    dirs = filter(lambda x:not x.startswith('.'), dirs)
    dirs = filter(lambda x:os.path.isdir(x), dirs)
    dirs.sort()

    table = ASCIITable(*[ColorString(x, 'yellow_bold') for x in
                         ('SCM', 'CHG', 'DIR', 'BRANCH', 'LATEST')
                         ])

    for dir in dirs:
        isGit = os.path.isdir(os.path.join(dir, '.git'))
        isSvn = os.path.isdir(os.path.join(dir, '.svn'))
        isGitSvn = isGit and runcmd('cd %s; git svn info' % dir) and True
        changes = ''
        branch = ''
        latest = ''
        if isSvn:
            if len(runcmd('svn status %s' % dir)) > 0:
                changes = ColorString(' !', 'red_bold')
            url = runcmd('svn info %s | grep URL | cut -d " " -f 2' % dir)[0].strip().split('/')
            if url[-1]=='trunk':
                branch = ColorString(url[-1], 'green')
            elif url[-2]=='branches':
                branch = ColorString(url[-1], 'yellow_bold')
            elif url[-2]=='tags':
                branch = ColorString('/'.join(url[-2:]), 'green_bold')
            else:
                branch = ColorString(url[-1] + ' (?)', 'red_bold')
        if isGit:
            if 'nothing to commit' not in ''.join(runcmd('cd %s;git status' % dir)):
                changes = '!'
            ahead = 0
            if not isGitSvn:
                ahead = runcmd(r'cd %s ; git status| grep ahead | sed -e "s/^.*\([[:digit:]]\).*$/\1/"' % dir)
                ahead = ahead and int(ahead[0].strip()) or 0
            else:
                xpr = re.compile('^Author:')
                log = ''.join(runcmd('cd %s ; git log' % dir)).strip().split('Author:')
                ahead = len([chg for chg in log if 'git-svn-id:' not in chg]) - 1
            if changes and ahead > 0:
                changes = ColorString(changes, 'red_bold') + ' ' + ColorString('%i' % ahead, 'yellow_bold')
            elif changes:
                changes = ColorString(' ' + changes, 'red_bold')
            elif ahead:
                changes = ColorString('%i' % ahead, 'yellow_bold')
            branch = runcmd(r"cd %s ; git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'" % dir)[0].strip()
            if branch=='master':
                branch = ColorString(branch, 'green')
            else:
                branch = ColorString(branch, 'yellow_bold')
            tags = []
            for tag in [x.strip() for x in runcmd(r'cd %s ; git branch -a | grep tags | cut -d "/" -f 3' % dir)]:
                if tag[0]=='v':
                    tag = tag[1:]
                tags.append(tag)
            tags.sort()
            if len(tags)>0:
                latest = tags[-1]
        table.push((
                isGit and ColorString('git', 'green') or isSvn and ColorString('svn', 'red') or '',
                changes,
                dir,
                branch,
                latest
                ))
    table()

def pull():
    dirs = os.listdir('.')
    dirs = filter(lambda x:not x.startswith('.'), dirs)
    dirs = filter(lambda x:os.path.isdir(x), dirs)
    dirs.sort()
    for dir in dirs:
        isGit = os.path.isdir(os.path.join(dir, '.git'))
        isSvn = os.path.isdir(os.path.join(dir, '.svn'))
        if not isGit and not isSvn:
            continue
        scm = isGit and ColorString('git', 'green') or isSvn and ColorString('svn', 'red') or ''
        print 'pulling', ColorString(dir, 'yellow'), '(%s)' % scm
        cmd = None
        if isSvn:
            cmd = 'svn up %s' % dir
        elif isGit:
            cmd = 'cd %s ; git svn rebase' % dir
        print '  %', cmd
        print ''.join(runcmd(cmd)).strip()
        print ''

def push():
    dirs = os.listdir('.')
    dirs = filter(lambda x:not x.startswith('.'), dirs)
    dirs = filter(lambda x:os.path.isdir(x), dirs)
    dirs = filter(lambda dir:os.path.isdir(os.path.join(dir, '.git')), dirs)
    dirs.sort()
    for dir in dirs:
        print 'pushing', ColorString(dir, 'yellow')
        cmd = 'cd %s ; git svn dcommit' % dir
        print '  %', cmd
        print ''.join(runcmd(cmd)).strip()
        print ''

class ASCIITable(object):

    def __init__(self, *titles):
        self.titles = titles
        self.rows = []

    def push(self, row):
        self.rows.append(row)

    def __call__(self):
        widths = []
        for row in [self.titles] + self.rows:
            for col, val in enumerate(row):
                if len(widths) <= col:
                    widths.append(0)
                if len(val) + 2 > widths[col]:
                    widths[col] = len(val) + 2
        char_corner = ColorString('+', 'red')
        char_vertical = ColorString('|', 'yellow')
        char_horicontal = ColorString('-', 'yellow')
        def hline(sep=char_horicontal):
            chrs = [char_corner]
            for w in widths:
                chrs.append(w*sep)
                chrs.append(char_corner)
            return ''.join(chrs)
        def formatrow(row):
            chrs = [char_vertical]
            for col, val in enumerate(row):
                newval = ' ' + val.ljust(widths[col] - 1)
                chrs.append(newval)
                chrs.append(char_vertical)
            return ''.join(chrs)
        print hline()
        print formatrow(self.titles)
        print hline()
        for row in self.rows:
            print formatrow(row)
        print hline()



if __name__=='__main__':
    if len(sys.argv)>1 and sys.argv[1]=='pull':
        pull()
    elif len(sys.argv)>1 and sys.argv[1]=='push':
        push()
    else:
        show_status()
