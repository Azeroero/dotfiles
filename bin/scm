#!/usr/bin/python


import os
from optparse import OptionParser

LOCAL_REPOS = '/Users/jone/projects/gitsvn/'

class SCM(object):

    version = '0.1'
    usage = "%prog ACTION [options]"

    def __init__(self):
        self.parser = OptionParser(version=self.version)
        self.extend_usage(self.parser)
        self.options, self.args = self.parser.parse_args()
        if len(self.args)==0:
            self.parser.print_usage()
        else:
            args = self.args[:]
            args.pop(0)
            self.actions()[self.args[0]](*args)

    def extend_usage(self, parser):
        usage = parser.get_usage()
        usage += '\nACTIONS:\n'
        for name, func in self.actions().items():
            usage += '  %s: %s\n' % (
                name.ljust(10),
                func.__doc__.strip()
                )
        parser.set_usage(usage)

    def actions(self):
        return  {
            'stat' :    self.stat_action,
            'st' :      self.stat_action,
            'ignore' :  self.ignore_action,
            'i' :       self.ignore_action,
            'l' :       self.pull_action,
            'pull' :    self.pull_action,
            'p' :       self.push_action,
            'push' :    self.push_action,
            'url' :     self.url_action,
            'ucp' :     self.url_copy_action,
            'uo' :      self.open_url_action,
            'sw' :      self.switch_action,
            'switch' :  self.switch_action,
            'to_git' :  self.switch_to_git,
            'to_svn' :  self.switch_to_svn,
            'get' :     self.get_action,
            'put' :     self.put_action,
            'ie' :      self.ignore_egginfo_action,
            'clean' :   self.clean_action,
            'master' :  self.trunk_as_master_action,
            'stash' :   self.stash_action,
            }


    def stat_action(self):
        """
        Show stats of folders (SCM, changes, branch)
        """
        runcmd('~/.bin/scmStat')

    def ignore_action(self):
        """
        Use SVN-Ignores for GIT
        """
        runcmd('cp IGNORE.txt .gitignore')
        runcmd('echo "\n.gitignore" >> .gitignore')

    def ignore_egginfo_action(self):
        """
        Add *.egg-info to gitignores
        """
        runcmd('echo "\n*.egg-info" >> .gitignore')

    def pull_action(self):
        """
        Fetch and rebase
        """
        if self.is_svn():
            runcmd('svn up')
            runcmd('scmStat pull')
        else:
            runcmd('git svn fetch')
            runcmd('git svn rebase')

    def push_action(self):
        """
        Push (dcommit) -> only git
        """
        if self.is_svn():
            runcmd('scmStat push')
        else:
            runcmd('git svn dcommit')

    def url_action(self):
        """
        Shows svn-URL
        """
        if self.is_svn():
            runcmd('svn info | grep URL')
        else:
            runcmd('git svn info | grep URL')

    def url_copy_action(self):
        """
        copies svn-URL
        """
        if self.is_svn():
            runcmd("echo -n `svn info | grep URL | cut -d ' ' -f 2` | pbcopy")
        else:
            runcmd("echo -n `git svn info | grep URL | cut -d ' ' -f 2` | pbcopy")

    def open_url_action(self):
        """
        opens the URL in the default browser
        """
        if self.is_svn():
            runcmd("open `svn info | grep URL | cut -d ' ' -f 2`")
        else:
            runcmd("open `git svn info | grep URL | cut -d ' ' -f 2`")

    def switch_action(self):
        """
        Switches a svn repo to git (using command switchSvn2Git)
        """
        runcmd('switchSvn2Git')

    def switch_to_git(self, *filter):
        """
        Switches sub-directories to git (used in src directory)
        """
        for dir in os.listdir('.'):
            if not os.path.isdir(dir):
                continue
            if len(filter)>0:
                found = False
                for case in filter:
                    if dir.startswith(case.replace('*', '')):
                        found = True
                if not found:
                    continue
            if os.path.exists(os.path.join(dir, '.git')):
                continue
            # lets switch
            runcmd('cd %s; ftw sw' % dir)

    def switch_to_svn(self, *filter):
        """
        Switches sub-directories to svn (used in src directory)
        """
        for dir in os.listdir('.'):
            if not os.path.isdir(dir):
                continue
            if len(filter)>0:
                found = False
                for case in filter:
                    if dir.startswith(case.replace('*', '')):
                        found = True
                if not found:
                    continue
            if os.path.exists(os.path.join(dir, '.svn')):
                continue
            # lets switch
            runcmd('cd %s; ftw sw' % dir)

    def get_action(self, package):
        """
        Checkout package from local git cache
        """
        package_path = os.path.join(LOCAL_REPOS, package)
        if not os.path.isdir(package_path):
            raise Exception('No local repository for %s' % package)
        if os.path.isdir(package):
            raise Exception('Folder ./%s/ already existing' % package)
        runcmd('cd %s; git reset --hard' % package_path)
        runcmd('cd %s; git svn fetch' % package_path)
        runcmd('cd %s; git svn rebase' % package_path)
        runcmd('cp -r %s .' % package_path)

    def put_action(self):
        """
        Update local git cache with current git repository
        """
        if not os.path.isdir('.git'):
            raise Exception('Only usable at the root of the git repository')
        package = os.path.basename(os.getcwd())
        package_cache_path = os.path.join(LOCAL_REPOS, package)
        runcmd('rm -rf %s' % package_cache_path)
        runcmd('cp -r . %s' % package_cache_path)

    def stash_action(self, *args):
        """
        Stash src-folder for mr.developer < 1.1 support (removes git repos) >> scm stash[| list|apply[| NUM]]
        """
        stash_dir = os.path.abspath('.scm.stash')
        # prepare
        if not os.path.isdir(stash_dir):
            os.mkdir(stash_dir)
        if len(args)==0:
            # make new stash
            stash = None
            for egg in os.listdir('.'):
                egg_dir = os.path.abspath(egg)
                if egg_dir==stash_dir:
                    continue
                if os.path.exists(os.path.join(egg_dir, '.svn')):
                    print ColorString('Keeping ', 'green'), egg, ColorString('[SVN]', 'green')
                elif os.path.exists(os.path.join(egg_dir, '.git')):
                    print ColorString('Stashing', 'red'), egg, ColorString('[GIT]', 'red')
                    if not stash:
                        # create stash if not existing
                        i = 1
                        while os.path.exists(os.path.join(stash_dir, str(i))):
                            i += 1
                        stash = os.path.join(stash_dir, str(i))
                        os.mkdir(stash)
                    os.rename(egg_dir, os.path.join(stash, egg))
                else:
                    print ColorString('Skipping', 'yellow'), egg
        elif len(args)==1 and args[0]=='list':
            # list current stashes
            if len(os.listdir(stash_dir))==0:
                print ColorString('There are no stashes...', 'yellow')
            else:
                stashes = os.listdir(stash_dir)
                stashes.sort()
                stashes.reverse()
                for stashnr in stashes:
                    stash = os.path.join(stash_dir, str(stashnr))
                    pkgs = ', '.join(os.listdir(stash))
                    print ColorString('%s:' % stashnr, 'red'), pkgs
        elif len(args) in (1,2) and args[0]=='apply':
            stashnr = None
            if len(args)==2:
                stashnr = str(args[1])
            else:
                stashes = os.listdir(stash_dir)
                stashes.sort()
                stashnr = stashes[-1]
            stash = os.path.join(stash_dir, stashnr)
            if not os.path.exists(stash):
                print ColorString('Stash %s not existing. Run `scm stash list`' % stashnr,
                                  'red_bold')
                return
            stashed_eggs = os.listdir(stash)
            for egg in stashed_eggs:
                stashed_egg_path = os.path.join(stash, egg)
                src_egg_path = os.path.abspath(egg)
                if os.path.exists(src_egg_path):
                    runcmd('rm -rf %s' % src_egg_path)
                runcmd('mv %s %s' % (stashed_egg_path, src_egg_path))
            os.rmdir(stash)
        # cleanup
        if os.path.isdir(stash_dir) and len(os.listdir(stash_dir))==0:
            # remove stash-dir, its empty
            os.rmdir(stash_dir)

    def clean_action(self):
        """
        Cleans up a local git repo: removes chache files and empty directories
        """
        REMOVE_EXTENSIONS = [
            '.class',
            '.mo',
            '.pyc',
            '.swo',
            '.swp',
            ]
        IGNORE = [
            '.git',
            ]
        def is_ignored(root, file):
            if file in IGNORE:
                return True
            for part in root.split('/'):
                if part in IGNORE:
                    return True
            return False
        import os
        for root,dirs,files in os.walk('.'):
            for file in files:
                if is_ignored(root, file):
                    continue
                name, ext = os.path.splitext(file)
                if ext.lower() not in REMOVE_EXTENSIONS:
                    continue
                path = os.path.join(root, file)
                try:
                    os.remove(path)
                    print 'removed %s' % path
                except OSError, e:
                    print 'ERR: could not remove %s (%s)' % (path, str(e))
        for root,dirs,files in os.walk('.'):
            for dir in dirs:
                if is_ignored(root, dir):
                    continue
                path = os.path.join(root, dir)
                if len(os.listdir(path))==0:
                    try:
                        os.removedirs(path)
                        print 'removed %s' % path
                    except OSError, e:
                        print 'ERR: could not remove %s (%s)' % (path, str(e))

    def trunk_as_master_action(self):
        """
        Checks out the trunk as master (git)
        """
        if runcmd('git checkout remotes/trunk')==0:
            if runcmd('git branch -D master')==0:
                runcmd('git checkout -b master')

    def is_svn(self):
        return os.path.isdir('.svn')

def runcmd(cmd, log=True, respond=False):
    if log:
        print '  >', ColorString(cmd, 'yellow')
    if respond:
        p = os.popen(cmd, 'r')
        l = p.readlines()
        p.close()
        return l
    else:
        return os.system(cmd)

COLORS = {
    'red'           : '\033[0;31m%s\033[00m',
    'green'         : '\033[0;32m%s\033[00m',
    'yellow'        : '\033[0;33m%s\033[00m',
    'red_bold'      : '\033[1;31m%s\033[00m',
    'green_bold'    : '\033[1;32m%s\033[00m',
    'yellow_bold'   : '\033[1;33m%s\033[00m',
    }

class ColorString(str):

    def __new__(cls, value, color):
        self = str.__new__(cls, COLORS[color] % value)
        self.value = value
        self.color = color
        return self

    def __len__(self):
        return len(self.value)

    def ljust(self, width):
        s = str(self)
        if width - len(self) > 0:
            s += ' ' * (width - len(self))
        return s

if __name__=='__main__':
    SCM()
