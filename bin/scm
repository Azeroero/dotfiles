#!/usr/bin/python


import os
from optparse import OptionParser

LOCAL_REPOS = '/Users/jone/projects/gitsvn/'

class SCM(object):

    version = '0.1'
    usage = "%prog ACTION [options]"

    def __init__(self):
        self.parser = OptionParser(version=self.version)
        self.extend_usage(self.parser)
        self.options, self.args = self.parser.parse_args()
        if len(self.args)==0:
            self.parser.print_usage()
        else:
            args = self.args[:]
            args.pop(0)
            self.actions()[self.args[0]](*args)

    def extend_usage(self, parser):
        usage = parser.get_usage()
        usage += '\nACTIONS:\n'
        for name, func in self.actions().items():
            usage += '  %s: %s\n' % (
                name.ljust(10),
                func.__doc__.strip()
            )
        parser.set_usage(usage)

    def actions(self):
        return  {
                'stat' :    self.stat_action,
                'st' :      self.stat_action,
                'ignore' :  self.ignore_action,
                'i' :       self.ignore_action,
                'l' :       self.pull_action,
                'pull' :    self.pull_action,
                'p' :       self.push_action,
                'push' :    self.push_action,
                'url' :     self.url_action,
                'sw' :      self.switch_action,
                'switch' :  self.switch_action,
                'get' :     self.get_action,
                'put' :     self.put_action,
                'ie' :      self.ignore_egginfo_action,
                'clean' :   self.clean_action,
        }
 

    def stat_action(self):
        """
        Show stats of folders (SCM, changes, branch)
        """
        runcmd('~/.bin/scmStat')

    def ignore_action(self):
        """
        Use SVN-Ignores for GIT
        """
        runcmd('cp IGNORE.txt .gitignore')
        runcmd('echo "\n.gitignore" >> .gitignore')

    def ignore_egginfo_action(self):
        """
        Add *.egg-info to gitignores
        """
        runcmd('echo "\n*.egg-info" >> .gitignore')

    def pull_action(self):
        """
        Fetch and rebase
        """
        if self.is_svn():
            runcmd('svn up')
            runcmd('scmStat pull')
        else:
            runcmd('git svn fetch')
            runcmd('git svn rebase')

    def push_action(self):
        """
        Push (dcommit) -> only git
        """
        if self.is_svn():
            runcmd('scmStat push')
        else:
            runcmd('git svn dcommit')

    def url_action(self):
        """
        Shows svn-URL
        """
        if self.is_svn():
            runcmd('svn info | grep URL')
        else:
            runcmd('git svn info | grep URL')

    def switch_action(self):
        """
        Switches a svn repo to git (using command switchSvn2Git)
        """
        runcmd('switchSvn2Git')

    def get_action(self, package):
        """
        Checkout package from local git cache
        """
        package_path = os.path.join(LOCAL_REPOS, package)
        if not os.path.isdir(package_path):
            raise Exception('No local repository for %s' % package)
        if os.path.isdir(package):
            raise Exception('Folder ./%s/ already existing' % package)
        runcmd('cd %s; git reset --hard' % package_path)
        runcmd('cd %s; git svn fetch' % package_path)
        runcmd('cd %s; git svn rebase' % package_path)
        runcmd('cp -r %s .' % package_path)

    def put_action(self):
        """
        Update local git cache with current git repository
        """
        if not os.path.isdir('.git'):
            raise Exception('Only usable at the root of the git repository')
        package = os.path.basename(os.getcwd())
        package_cache_path = os.path.join(LOCAL_REPOS, package)
        runcmd('rm -rf %s' % package_cache_path)
        runcmd('cp -r . %s' % package_cache_path)

    def clean_action(self):
        """
        Cleans up a local git repo: removes chache files and empty directories
        """
        REMOVE_EXTENSIONS = [
                '.class',
                '.mo',
                '.pyc',
                '.swo',
                '.swp',
        ]
        IGNORE = [
            '.git',
        ]
        def is_ignored(root, file):
            if file in IGNORE:
                return True
            for part in root.split('/'):
                if part in IGNORE:
                    return True
            return False
        import os
        for root,dirs,files in os.walk('.'):
            for file in files:
                if is_ignored(root, file):
                    continue
                name, ext = os.path.splitext(file)
                if ext.lower() not in REMOVE_EXTENSIONS:
                    continue
                path = os.path.join(root, file)
                try:
                    os.remove(path)
                    print 'removed %s' % path
                except OSError, e:
                    print 'ERR: could not remove %s (%s)' % (path, str(e))
        for root,dirs,files in os.walk('.'):
            for dir in dirs:
                if is_ignored(root, dir):
                    continue
                path = os.path.join(root, dir)
                if len(os.listdir(path))==0:
                    try:
                        os.removedirs(path)
                        print 'removed %s' % path
                    except OSError, e:
                        print 'ERR: could not remove %s (%s)' % (path, str(e))

    def is_svn(self):
        return os.path.isdir('.svn')

def runcmd(cmd, log=True, respond=False):
    if log:
        print '  >', ColorString(cmd, 'yellow')
    if respond:
        p = os.popen(cmd, 'r')
        l = p.readlines()
        p.close()
        return l
    else:
        os.system(cmd)

COLORS = {
    'red'           : '\033[0;31m%s\033[00m',
    'green'         : '\033[0;32m%s\033[00m',
    'yellow'        : '\033[0;33m%s\033[00m',
    'red_bold'      : '\033[1;31m%s\033[00m',
    'green_bold'    : '\033[1;32m%s\033[00m',
    'yellow_bold'   : '\033[1;33m%s\033[00m',
}

class ColorString(str):

    def __new__(cls, value, color):
        self = str.__new__(cls, COLORS[color] % value)
        self.value = value
        self.color = color
        return self

    def __len__(self):
        return len(self.value)

    def ljust(self, width):
        s = str(self)
        if width - len(self) > 0:
            s += ' ' * (width - len(self))
        return s

if __name__=='__main__':
    SCM()
