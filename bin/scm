#!/usr/bin/python


import os
from optparse import OptionParser

class SCM(object):

    version = '0.1'
    usage = "%prog ACTION [options]"

    def __init__(self):
        self.parser = OptionParser(version=self.version)
        self.extend_usage(self.parser)
        self.options, self.args = self.parser.parse_args()
        if len(self.args)==0:
            self.parser.print_usage()
        else:
            self.actions()[self.args[0]]()

    def extend_usage(self, parser):
        usage = parser.get_usage()
        usage += '\nACTIONS:\n'
        for name, func in self.actions().items():
            usage += '  %s: %s\n' % (
                name.ljust(10),
                func.__doc__.strip()
            )
        parser.set_usage(usage)

    def actions(self):
        return  {
                'stat' :    self.stat_action,
                'st' :      self.stat_action,
                'ignore' :  self.ignore_action,
                'i' :       self.ignore_action,
        }
 

    def stat_action(self):
        """
        Show stats of folders (SCM, changes, branch)
        """
        runcmd('~/.bin/scmStat')

    def ignore_action(self):
        """
        Use SVN-Ignores for GIT
        """
        runcmd('cp IGNORE.txt .gitignore')
        runcmd('echo "\n.gitignore" >> .gitignore')
        

def runcmd(cmd, log=True, respond=False):
    if log:
        print '  >', ColorString(cmd, 'yellow')
    if respond:
        p = os.popen(cmd, 'r')
        l = p.readlines()
        p.close()
        return l
    else:
        os.system(cmd)

COLORS = {
    'red'           : '\033[0;31m%s\033[00m',
    'green'         : '\033[0;32m%s\033[00m',
    'yellow'        : '\033[0;33m%s\033[00m',
    'red_bold'      : '\033[1;31m%s\033[00m',
    'green_bold'    : '\033[1;32m%s\033[00m',
    'yellow_bold'   : '\033[1;33m%s\033[00m',
}

class ColorString(str):

    def __new__(cls, value, color):
        self = str.__new__(cls, COLORS[color] % value)
        self.value = value
        self.color = color
        return self

    def __len__(self):
        return len(self.value)

    def ljust(self, width):
        s = str(self)
        if width - len(self) > 0:
            s += ' ' * (width - len(self))
        return s

if __name__=='__main__':
    SCM()
